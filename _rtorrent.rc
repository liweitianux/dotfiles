#
# ~/.rtorrent.rc
# See https://github.com/rakshasa/rtorrent/wiki/CONFIG-Template
# Requires rtorrent 0.9.x
#
# Aaron LI
# 2016-05-09
#

# Instance layout (base paths)
method.insert = cfg.basedir, private|const|string, (cat,"/home/aly/rtorrent/")
method.insert = cfg.watch,   private|const|string, (cat,(cfg.basedir),"watch/")
method.insert = cfg.logs,    private|const|string, (cat,(cfg.basedir),"log/")
method.insert = cfg.logfile, private|const|string, (cat,(cfg.logs),"rtorrent-",(system.time),".log")

# Listening port for incoming peer traffic
network.port_range.set = 62009-62009
network.port_random.set = no

# Tracker-less torrent and UDP tracker support
dht.mode.set = auto
dht.port.set = 6881
protocol.pex.set = yes
# Whether the client should try to connect to UDP trackers.
trackers.use_udp.set = yes

# Peer settings
throttle.min_peers.normal.set = 20
throttle.max_peers.normal.set = 60
throttle.min_peers.seed.set = 30
throttle.max_peers.seed.set = 80

# Limits for file handle resources, this is optimized for
# an `ulimit` of 1024 (a common default). You MUST leave
# a ceiling of handles reserved for rTorrent's internal needs!
network.http.max_open.set = 50
network.max_open_files.set = 600
network.max_open_sockets.set = 300

# Memory resource usage (increase if you have a large number of items loaded,
# and/or the available resources to spend)
pieces.memory.max.set = 1800M
network.xmlrpc.size_limit.set = 2M

# Basic operational settings
session.path.set = (cat,(cfg.basedir),".session")
directory.default.set = (cat,(cfg.basedir),"download")

# Watch directories (add more as you like, but use unique schedule names)
#   load.normal: only load torrents
#   load.start: load torrents and start downloading
schedule = watch_load,15,10,((load.normal,(cat,(cfg.watch),"load/*.torrent")))
schedule = watch_start,10,10,((load.start,(cat,(cfg.watch),"start/*.torrent")))

# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,((close_low_diskspace,5000M))

# Encryption options, set to any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
protocol.encryption.set = allow_incoming,try_outgoing,enable_retry

# Check hash for finished torrents.
#pieces.hash.on_completion.set = yse
check_hash = yes

# Logging:
#   Levels = critical error warn notice info debug
#   Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
print = (cat,"Logging to ",(cfg.logfile))
log.open_file = "log", (cfg.logfile)
log.add_output = "info", "log"


# vim: set ts=8 sw=4 tw=0 fenc=utf-8 ft=conf: #
